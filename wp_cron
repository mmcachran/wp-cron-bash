#!/bin/sh

# Script Defaults.
INTERVAL="60s"
VERBOSE=false
MULTISITE=false
STATUS_OK="200"

# Trap keyboard interrupt (control-c).
trap script_interrupt SIGINT

script_interrupt() {
        echo ""
        echo "*** Script Interrupted ***"
        
        cleanup
        
        echo "*** Exiting ***"

        exit $?
}

# @ToDo - implement logging and then remove it here.
cleanup() {
	echo "running cleanup"
}

usage() {
	cat << EOF
	USAGE: wp_cron --domain <base site url> --interval <delay time> --verbose
	
	Possible delay time values:
		s for seconds (default)
		m for minutes
		h for hours
		d for days

	Flags:
		--domain (-d)
			Sets the base domain to call wp-cron.php on.
				Note: If DOMAIN_CURRENT_SITE is defined in wp-config.php and you're running this command from your base install directory, --domain can be omitted.
				
		--interval (-i)
			Sets the amount of time between wp-cron.php calls

		--multisite (-m)
			Find all blogs in the multisite and do wp-cron on them
	
		--verbose (-v)
			Use curl instead of wget to show cron responses
			
	
	EXAMPLE: wp_cron -d msnc.dev -i 60s -v
EOF
}

parse_wp_config() {
	DOMAIN=`cat wp-config.php | grep DOMAIN_CURRENT_SITE | cut -d \' -f 4`
}

run_cron() {
	if [ "$VERBOSE" = true ]; then
		curl -I http://$DOMAIN/wp-cron.php?doing_wp_cron
	else
		wget --quiet --output-document=/dev/null http://$DOMAIN/wp-cron.php?doing_wp_cron
	fi;
}

runtime_stats() {
	echo "Interval: $INTERVAL"
	echo "Domain: $DOMAIN"
	echo "Verbose: $VERBOSE"
	echo "Multisite: $MULTISITE"
	echo "===================="
}

loop_cron() {
	# show the stats
	runtime_stats
	
	# run the loop
	while true; do
		echo "Running cron" `date +%H:%M:%S`

		if [ "$MULTISITE" = true ]; then
			loop_multisite_cron
		else
			run_cron
		fi

		sleep $INTERVAL
	done	
}

loop_multisite_cron() {
	# Make sure we have blogs.
	if [ -z "$BLOGS" ]; then
		fetch_mysql_credentials
		fetch_multisite_blogs
	fi

	# Loop through blogs.
	for BLOG in $BLOGS; do
		URL="{$BLOG}wp-cron.php?doing_wp_cron"
		STATUS=`curl -s -I ${URL} | grep HTTP/1.1 | awk {'print $2'}`

		if [ ! "$STATUS" == "${STATUS_OK}" ]; then
				echo "ERROR - unable to reach blog: ${BLOG}"
				echo "exiting wp-cron script (${script_name})"
				exit;
		fi

		echo "Finished running wp-cron on: ${BLOG}"
		sleep 2s
	done;
}

fetch_multisite_blogs() {
	SQL="""
	SELECT
		CONCAT(domain, path)
	FROM
		${WP_BLOGS_TABLE}
	WHERE
		archived='0' AND
		spam='0' AND
		deleted='0';
	""";

	BLOGS=`mysql \
		-u${MYSQL_USERNAME} \
		-p${MYSQL_PASSWORD} \
		--silent \
		--skip-column-names \
		${MYSQL_DATABASE} \
		--execute "${SQL}"`
}

fetch_mysql_credentials() {
	MYSQL_USERNAME=`cat wp-config.php | grep DB_USER | cut -d \' -f 4`;
	MYSQL_PASSWORD=`cat wp-config.php | grep DB_PASSWORD | cut -d \' -f 4`;
	MYSQL_DATABASE=`cat wp-config.php | grep DB_NAME | cut -d \' -f 4`;
	WP_TABLE_PREFIX=`sed '/^$table_prefix *= *'\''\(.*\)'\''.*$/!d;s//\1/g' wp-config.php`;
	WP_BLOGS_TABLE="${WP_TABLE_PREFIX}blogs";
}

parse_args() {
	while [ "$#" -gt 0 ]; do
		case $1 in
			-h|-\?|\?|--help)
				usage
				exit 0
				;;
			-i|--interval)
				if [ "$#" -gt 1 ]; then
					INTERVAL=$2
					shift 2
					continue
				fi;
				;;

			-d|--domain)
				if [ "$#" -gt 1 ]; then
					DOMAIN=$2
					shift 2
					continue
				fi;
				;;

			-m|--multisite)
				MULTISITE=true
				;;
			
			-v|--verbose)
				VERBOSE=true
				;;
				
			--)
				shift
				break
				;;
			
			-?*)
				printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
				;;
			
			*)
				break
		esac
		
		shift
	done
}

parse_args $@

# If no domain is set yet, try to figure it out with wp-config.php.
if [[ -z "$DOMAIN" && -f "wp-config.php" ]]; then
	parse_wp_config
fi

# Check to make sure we have a domain.
if [ -z "$DOMAIN" ]; then
	usage
	exit 0
else
	loop_cron
fi
